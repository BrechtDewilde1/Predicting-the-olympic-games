else{
return(gold[position])
}
}else if (label == "Silver"){
if (position > length(silver)){
return(0)
}
else{
return(silver[position])
}
} else if (label == "Bronze"){
if (position > length(bronze)){
return(0)
}
else{
return(bronze[position])
}
}
}
# create column with place score
place_score(past_times$counter, past_times$Label)
place_score <- function(position, label){
gold <- c(270, 220, 195, 175, 155, 145, 135, 125, 80, 70, 60, 50, 45, 40, 37, 34, 31, 29, 27, 25)
silver <- c(170,130,115,100,85,75,65,55,45,35,25,20)
bronze <- c(140, 105, 90, 75, 60, 50, 40, 30, 25, 22, 19, 17)
if (label == "Gold"){
if (position > length(gold)){
return(0)
}
else{
return(gold[position])
}
}else if (label == "Silver"){
if (position > length(silver)){
return(0)
}
else{
return(silver[position])
}
} else if (label == "Bronze"){
if (position > length(bronze)){
return(0)
}
else{
return(bronze[position])
}
}
}
# create column with place score
place_score(past_times$counter, past_times$Label)
# create column with place score
place_score$position_score <- place_score(past_times$counter, past_times$Label)
place_score(past_times$counter, past_times$Label)
# create column with place score
place_score$position_score <- place_score(past_times$counter, past_times$Label)
# create column with place score
place_score$positionScore <- place_score(past_times$counter, past_times$Label)
View(past_times)
# read the past times dataframe
file_path = "C:\\Users\\BrechtDewilde\\Documents\\Github\\Predicting-the-olympic-games\\IDA code\\Marathon\\Data\\scraped\\world_athletics\\world_athletics.csv"
past_times <- read.csv(file_path, stringsAsFactors = FALSE)
past_times$Performance <- as.POSIXct(past_times$Performance, format="%H:%M:%S")
# delete country from the place to match places
past_times$Place <- sub("\\(([^]]+)\\)", "", past_times$Place)
past_times$Place <- trimws(past_times$Place)
# function to determine the time score
scores <- read.csv(file.path("Data", "scorings.csv"))
convert_to_secs <- function(time){
return(as.numeric(format(time, "%H")) * 3600 + as.numeric(format(time, "%M")) * 60 + as.numeric(format(time, "%S")))
}
time_score <- function(time){
a = 0.0000191003
b = -15599.4039272134
c = 0.0084789663
return(floor(a* (convert_to_secs(time) + b)^2 + c))
}
# time score
past_times$time_score <- time_score(past_times$Performance)
past_times$Performance <- format(past_times$Performance, "%H:%M:%S")
#  read and clean the labels database
labels <- read.csv(file.path("Data", "marathon labels.csv"), stringsAsFactors = FALSE)
labels$Date <- NULL
labels$Competition <- NULL
labels$Men.s.winner <- NULL
labels$Women.s.winner <- NULL
labels <- filter(labels, Distance == "Marathon")
# add the label of the marathon to each observation
past_times <- merge(past_times, labels, by.x = "Place", by.y = "Venue")
past_times$Distance <- NULL
past_times$Country <- NULL
# add position result for each marathon
past_times <- past_times %>% group_by(Place, Date) %>% arrange(desc(time_score)) %>% mutate(position = row_number(Place))
# function that determines the score of each marathon based on place
place_score <- function(position, label){
gold <- c(270, 220, 195, 175, 155, 145, 135, 125, 80, 70, 60, 50, 45, 40, 37, 34, 31, 29, 27, 25)
silver <- c(170,130,115,100,85,75,65,55,45,35,25,20)
bronze <- c(140, 105, 90, 75, 60, 50, 40, 30, 25, 22, 19, 17)
if (label == "Gold"){
if (position > length(gold)){
return(0)
}
else{
return(gold[position])
}
}else if (label == "Silver"){
if (position > length(silver)){
return(0)
}
else{
return(silver[position])
}
} else if (label == "Bronze"){
if (position > length(bronze)){
return(0)
}
else{
return(bronze[position])
}
}
}
# create column with place score
place_score$positionScore <- place_score(past_times$counter, past_times$Label)
place_score <- function(position, label){
gold <- c(270, 220, 195, 175, 155, 145, 135, 125, 80, 70, 60, 50, 45, 40, 37, 34, 31, 29, 27, 25)
silver <- c(170,130,115,100,85,75,65,55,45,35,25,20)
bronze <- c(140, 105, 90, 75, 60, 50, 40, 30, 25, 22, 19, 17)
if (label == "Gold"){
if (position > length(gold)){
return(0)
}
else{
return(gold[position])
}
}else if (label == "Silver"){
if (position > length(silver)){
return(0)
}
else{
return(silver[position])
}
} else if (label == "Bronze"){
if (position > length(bronze)){
return(0)
}
else{
return(bronze[position])
}
}
}
# create column with place score
place_score$positionScore <- place_score(past_times$position, past_times$Label)
place_score <- function(position, label){
browser()
gold <- c(270, 220, 195, 175, 155, 145, 135, 125, 80, 70, 60, 50, 45, 40, 37, 34, 31, 29, 27, 25)
silver <- c(170,130,115,100,85,75,65,55,45,35,25,20)
bronze <- c(140, 105, 90, 75, 60, 50, 40, 30, 25, 22, 19, 17)
if (label == "Gold"){
if (position > length(gold)){
return(0)
}
else{
return(gold[position])
}
}else if (label == "Silver"){
if (position > length(silver)){
return(0)
}
else{
return(silver[position])
}
} else if (label == "Bronze"){
if (position > length(bronze)){
return(0)
}
else{
return(bronze[position])
}
}
}
# create column with place score
place_score$positionScore <- place_score(past_times$position, past_times$Label)
# create column with place score
place_score$positionScore <- place_score(past_times$position, past_times$Label)
# create column with place score
place_score$positionScore <- place_score(past_times$position, past_times$Label)
# create column with place score
output <-  place_score(past_times$position, past_times$Label)
# create column with place score
output <-  place_score(past_times$position, past_times$Label)
place_score <- function(position, label){
browser()
gold <- c(270, 220, 195, 175, 155, 145, 135, 125, 80, 70, 60, 50, 45, 40, 37, 34, 31, 29, 27, 25)
silver <- c(170,130,115,100,85,75,65,55,45,35,25,20)
bronze <- c(140, 105, 90, 75, 60, 50, 40, 30, 25, 22, 19, 17)
if (label == "Gold"){
if (position > length(gold)){
return(0)
}
else{
return(gold[position])
}
}else if (label == "Silver"){
if (position > length(silver)){
return(0)
}
else{
return(silver[position])
}
} else if (label == "Bronze"){
if (position > length(bronze)){
return(0)
}
else{
return(bronze[position])
place_score <- function(position, label){
gold <- c(270, 220, 195, 175, 155, 145, 135, 125, 80, 70, 60, 50, 45, 40, 37, 34, 31, 29, 27, 25)
silver <- c(170,130,115,100,85,75,65,55,45,35,25,20)
bronze <- c(140, 105, 90, 75, 60, 50, 40, 30, 25, 22, 19, 17)
if (label == "Gold"){
if (position > length(gold)){
return(0)
}
else{
return(gold[position])
}
}else if (label == "Silver"){
if (position > length(silver)){
return(0)
}
else{
return(silver[position])
}
} else if (label == "Bronze"){
if (position > length(bronze)){
return(0)
}
else{
return(bronze[position])
}
}
}
# create column with place score
output <-  place_score(past_times$position, past_times$Label)
past_times$position_score <- output
# create column with final score
past_times$total_score <- past_times$time_score + past_times$position_score
View(marathon)
rm("test")
rm("labels", "scores", "a", "b", "bronze", "c", "end", "start", "output", "file_path", "convert_to_secs", "place_score", "placings_score", "time_score")
rm("labels", "scores", "a", "b", "bronze", "c", "end", "start", "output", "file_path", "convert_to_secs", "place_score", "placing_score", "time_score")
# only select observations happend before augustus 2016
str(past_times)
as.Date(past_times$Date)
as.Date(past_times$Date, format = "%d %b %Y")
as.Date(past_times$Date, format = "%d %B %Y")
as.Date(past_times$Date, format = "%d %b %Y")
past_times$Dated <- as.Date(past_times$Date, format = "%d %b %Y")
month.abbr
month.abb
past_times$Dated <- sub("OCT", "Oct", past_times$Date)
as.Date(past_times$Dated, format = "%d %b %Y")
past_times$Dated <- as.Date(past_times$Dated, format = "%d %b %Y")
?dmy_hms
dmy_hms(past_times$Date)
dmy(past_times$Date)
ymd_hms(past_times$Date)
library(lubridate)
ymd_hms(past_times$Date)
dmy_hms(past_times$Date)
past_times$Date
date(past_times$Date)
type(past_times$Date)
class(past_times$Date)
# only select observations happend before augustus 2016
as.Date(iconv(past_times$Date,from='UTF-8',to='latin1'),'%d. %b %Y')
# only select observations happend before augustus 2016
as.Date(iconv(past_times$Date,from='UTF-8',to='latin1'),'%d %b %Y')
# only select observations happend before augustus 2016
lct <- Sys.getlocale("LC_TIME"); Sys.setlocale("LC_TIME", "C")
dates<- as.Date(past_times$Date, format="%d. %b. %Y")
# only select observations happend before augustus 2016
Sys.setlocale("LC_TIME", "en_US.UTF-8")
dates<- as.Date(past_times$Date, format="%d. %b. %Y")
dates<- as.Date(past_times$Date, format="%d %b %Y")
dates
past_times$Date <- as.Date(past_times$Date, format="%d %b %Y")
filter(past_times, Date < "2016-08-01")
pas_times2016 <- filter(past_times, Date < "2016-08-01")
past_times2016 <- filter(past_times, Date < "2016-08-01")
rm("pas_times2016")
View(past_times2016)
unique(past_times2016$Name)
# creation of the feature table
df <- data.frame(name = unique(past_times2016$Name), stringsAsFactors=FALSE)
# creation of the feature table
feature_table <- data.frame(name = unique(past_times2016$Name), stringsAsFactors=FALSE)
rm(df)
# Create of features for each athlete
past_times2016 %>% group_by("Name") %>% summarise(mean_score = mean(score))
# Create of features for each athlete
past_times2016 %>% group_by("Name") %>% summarise(mean_score = mean(total_score))
names(past_times2016)
# Create of features for each athlete
past_times2016 %>% group_by("Name") %>% summarise(mean_score = mean(time_score))
str(past_times2016)
# Create of features for each athlete
past_times2016 %>% group_by("Name")
# Create of features for each athlete
past_times2016 %>% group_by("Name") %>% summarise(avg = mean("total_score"))
?mean
# Create of features for each athlete
past_times2016 %>% group_by("Name") %>% summarise(avg = mean("total_score", na.rm = TRUE))
mean(past_times2016$position_score)
mean(past_times2016$position_score, na.rm = TRUE)
# Create of features for each athlete
past_times2016 %>% group_by("Name") %>% summarise(avg = mean("total_score", na.rm = TRUE))
?group_by
# Create of features for each athlete
past_times2016 %>% group_by("Name") %>% count("Date")
# Create of features for each athlete
past_times2016 %>% group_by(Name) %>% count("Date")
# Create of features for each athlete
past_times2016 %>% group_by(Name) %>% count(Date)
# Create of features for each athlete
past_times2016 %>% group_by(Name) %>% count("Date")
View(feature_table)
# Create of features for each athlete
temp <- past_times2016 %>% group_by(Name) %>% count("Date")
View(temp)
sort(unique(past_times2016$Name))
# creation of the feature table
feature_table <- data.frame(name = sort(unique(past_times2016$Name)), stringsAsFactors=FALSE)
# Create of features for each athlete
feature_table$number_of_marathons <- past_times2016 %>% group_by(Name) %>% count("Date")
past_times2016 %>% group_by(Name) %>% mutate(score_var = var("Score"))
past_times2016 %>% group_by(Name) %>% mutate(score_var = var("Score", na.rm = TRUE))
temp <- past_times2016 %>% group_by(Name) %>% mutate(score_var = var("Score", na.rm = TRUE))
View(temp)
names(past_times2016)
temp <- past_times2016 %>% group_by(Name) %>% mutate(score_var = var("time_score", na.rm = TRUE))
names(past_times2016)
View(temp)
var(past_times2016$time_score)
var(past_times2016$time_score, na.rm = TRUE)
temp <- past_times2016 %>% group_by(Name) %>% mutate(score_var = var(time_score, na.rm = TRUE))
View(temp)
temp <- past_times2016 %>% group_by(Name) %>% mutate(score_var = var("time_score", na.rm = TRUE))
str(past_times2016)
feature_table$number_of_marathons <- past_times2016 %>% group_by(Name) %>% summarise(score_var = var("time_score", na.rm = TRUE))
past_times2016 %>% group_by(Name) %>% summarise(score_var = var("time_score", na.rm = TRUE))
filter(time_score != NA) %>% group_by(Name) %>% summarise(mcount = mean(time_score), varcount = var(time_score))
past_times2016 %>% filter("time_score" != NA) %>% group_by(Name) %>% summarise(mcount = mean(time_score), varcount = var(time_score))
past_times2016 %>% group_by(Name) %>% summarise(mcount = mean(time_score), varcount = var(time_score))
past_times2016 %>% group_by(Name) %>% summarise(mcount = mean(time_score, na.rm = TRUE), varcount = var(time_score, na.rm = TRUE))
# Create of features for each athlete
feature_table$number_of_marathons <- past_times2016 %>% group_by(Name) %>% count("Date")
# score related features
feature_table$avg_score <- past_times2016 %>% group_by(Name) %>% summarise(mcount = mean(time_score, na.rm = TRUE))
# creation of the feature table
feature_table <- data.frame(name = sort(unique(past_times2016$Name)), stringsAsFactors=FALSE)
past_times2016 %>% group_by(Name) %>% summarise(mcount = mean(time_score, na.rm = TRUE)) %>% select(mcount)
# score related features
feature_table$avg_score <- past_times2016 %>% group_by(Name) %>% summarise(mcount = mean(time_score, na.rm = TRUE)) %>% select(mcount)
# score related features
feature_table$avg_score <-
past_times2016 %>% group_by(Name) %>% summarise(mcount = mean(time_score, na.rm = TRUE)) %>% select(mcount)
past_times2016 %>% group_by(Name) %>% summarise(mcount = mean(time_score, na.rm = TRUE)) %>% select(mcount)
as.vector(past_times2016 %>% group_by(Name) %>% summarise(mcount = mean(time_score, na.rm = TRUE)) %>% select(mcount))
# score related features
feature_table$avg_score <- as.vector(past_times2016 %>% group_by(Name) %>% summarise(mcount = mean(time_score, na.rm = TRUE)) %>% select(mcount))
# creation of the feature table
feature_table <- data.frame(name = sort(unique(past_times2016$Name)), stringsAsFactors=FALSE)
# score related features
feature_table$avg_score <- as.vector(past_times2016 %>% group_by(Name) %>% summarise(mcount = mean(time_score, na.rm = TRUE)) %>% select(mcount))
as.data.frame(past_times2016 %>% group_by(Name) %>% summarise(mcount = mean(time_score, na.rm = TRUE)) %>% select(mcount))
as.data.frame(past_times2016 %>% group_by(Name) %>% summarise(mcount = mean(time_score, na.rm = TRUE)) %>% select(mcount))$mcount
as.data.frame(past_times2016 %>% group_by(Name) %>% summarise(mcount = mean(time_score)) %>% select(mcount))$mcount
is.na(past_times2016$time_score)
past_times2016$Dated <- None
past_times2016$Dated <- NULL
past_times2016[complete.cases(past_times2016), ]
past_times2016 <- past_times2016[complete.cases(past_times2016), ]
# creation of the feature table
feature_table <- data.frame(name = sort(unique(past_times2016$Name)), stringsAsFactors=FALSE)
# score related features
as.data.frame(past_times2016 %>% group_by(Name) %>% summarise(mcount = mean(time_score)) %>% select(mcount))$mcount
# score related features
feautre_table$avg_time_score <- as.data.frame(past_times2016 %>% group_by(Name) %>% summarise(mcount = mean(time_score)) %>% select(mcount))$mcount
# score related features
feature_table$avg_time_score <- as.data.frame(past_times2016 %>% group_by(Name) %>% summarise(mcount = mean(time_score)) %>% select(mcount))$mcount
as.data.frame(past_times2016 %>% group_by(Name) %>% summarise(mcount = max(time_score)) %>% select(mcount))$mcount
feature_table$best_time_score <- as.data.frame(past_times2016 %>% group_by(Name) %>% summarise(mcount = max(time_score)) %>% select(mcount))$mcount
feature_table$avg_position_score <- as.data.frame(past_times2016 %>% group_by(Name) %>% summarise(mcount = mean(position_score)) %>% select(mcount))$mcount
feature_table$best_position_score <- as.data.frame(past_times2016 %>% group_by(Name) %>% summarise(mcount = max(position_score)) %>% select(mcount))$mcount
feature_table$avg_total_score <- as.data.frame(past_times2016 %>% group_by(Name) %>% summarise(mcount = mean(total_score)) %>% select(mcount))$mcount
feature_table$best_total_score <- as.data.frame(past_times2016 %>% group_by(Name) %>% summarise(mcount = max(total_score)) %>% select(mcount))$mcount
# position related features
feature_table$best_position <- as.data.frame(past_times2016 %>% group_by(Name) %>% summarise(mcount = max(position)) %>% select(mcount))$mcount
feature_table$avg_position <- as.data.frame(past_times2016 %>% group_by(Name) %>% summarise(mcount = mean(position)) %>% select(mcount))$mcount
# creation of the feature table
feature_table <- data.frame(name = sort(unique(past_times2016$Name)), stringsAsFactors=FALSE)
# score related features
feature_table$avg_time_score <- as.data.frame(past_times2016 %>% group_by(Name) %>% summarise(mcount = mean(time_score)) %>% select(mcount))$mcount
View(feature_table)
feature_table$best_time_score <- as.data.frame(past_times2016 %>% group_by(Name) %>% summarise(mcount = max(time_score)) %>% select(mcount))$mcount
feature_table$avg_position_score <- as.data.frame(past_times2016 %>% group_by(Name) %>% summarise(mcount = mean(position_score)) %>% select(mcount))$mcount
feature_table$best_position_score <- as.data.frame(past_times2016 %>% group_by(Name) %>% summarise(mcount = max(position_score)) %>% select(mcount))$mcount
feature_table$avg_total_score <- as.data.frame(past_times2016 %>% group_by(Name) %>% summarise(mcount = mean(total_score)) %>% select(mcount))$mcount
feature_table$best_total_score <- as.data.frame(past_times2016 %>% group_by(Name) %>% summarise(mcount = max(total_score)) %>% select(mcount))$mcount
View(feature_table)
# position related features
feature_table$best_position <- as.data.frame(past_times2016 %>% group_by(Name) %>% summarise(mcount = max(position)) %>% select(mcount))$mcount
feature_table$avg_position <- as.data.frame(past_times2016 %>% group_by(Name) %>% summarise(mcount = mean(position)) %>% select(mcount))$mcount
feature_table$avg_time_score <- as.data.frame(past_times2016 %>% group_by(Name) %>% summarise(mcount = mean(time_score)) %>% select(mcount))$mcount
feature_table$best_time_score <- as.data.frame(past_times2016 %>% group_by(Name) %>% summarise(mcount = max(time_score)) %>% select(mcount))$mcount
feature_table$avg_position_score <- as.data.frame(past_times2016 %>% group_by(Name) %>% summarise(mcount = mean(position_score)) %>% select(mcount))$mcount
feature_table$best_position_score <- as.data.frame(past_times2016 %>% group_by(Name) %>% summarise(mcount = max(position_score)) %>% select(mcount))$mcount
feature_table$avg_total_score <- as.data.frame(past_times2016 %>% group_by(Name) %>% summarise(mcount = mean(total_score)) %>% select(mcount))$mcount
feature_table$best_total_score <- as.data.frame(past_times2016 %>% group_by(Name) %>% summarise(mcount = max(total_score)) %>% select(mcount))$mcount
# position related features
feature_table$best_position <- as.data.frame(past_times2016 %>% group_by(Name) %>% summarise(mcount = max(position)) %>% select(mcount))$mcount
feature_table$avg_position <- as.data.frame(past_times2016 %>% group_by(Name) %>% summarise(mcount = mean(position)) %>% select(mcount))$mcount
# express marathon time in seconds
convert_to_secs <- function(time){
return(as.numeric(format(time, "%H")) * 3600 + as.numeric(format(time, "%M")) * 60 + as.numeric(format(time, "%S")))
}
past_times2016$Performance <- convert_to_secs(past_times2016$Performance)
# express marathon time in seconds
past_times2016$Performance<- as.POSIXct(past_times2016$Performance, format="%H:%M:%S")
past_times2016$Performance <- convert_to_secs(past_times2016$Performance)
# time related features
feature_table$best_time <- as.data.frame(past_times2016 %>% group_by(Name) %>% summarise(mcount = min(Performance)) %>% select(mcount))$mcount
feature_table$avg_time <- as.data.frame(past_times2016 %>% group_by(Name) %>% summarise(mcount = mean(Performance)) %>% select(mcount))$mcount
# position related features
feature_table$best_position <- as.data.frame(past_times2016 %>% group_by(Name) %>% summarise(mcount = min(position)) %>% select(mcount))$mcount
# marathon features
past_times2016 %>% group_by(Name) %>% count(Date)
# marathon features
past_times2016 %>% group_by(Name) %>% count("Date")
# marathon features
past_times2016 %>% group_by(Name) %>% count("Date") %>% select(n)
# marathon features
as.data.frame(past_times2016 %>% group_by(Name) %>% count("Date") %>% select(n))$n
past_times2016 %>% group_by(Name, Label) %>% count("Date")
past_times2016 %>% group_by(Name, Label) %>% count("Date") %>% filter(Label == "Gold")
as.data.frame(past_times2016 %>% group_by(Name, Label) %>% count("Date") %>% filter(Label == "Gold"))$n
feature_table$num_gold_marathons <- as.data.frame(past_times2016 %>% group_by(Name, Label) %>% count("Date") %>% filter(Label == "Gold"))$n
?count
feature_table$num_gold_marathons <- as.data.frame(past_times2016 %>% group_by(Name, Label, .drop = FALSE) %>% count("Date") %>% filter(Label == "Gold"))$n
as.data.frame(past_times2016 %>% group_by(Name, Label, .drop = FALSE) %>% count("Date") %>% filter(Label == "Gold"))$n
as.data.frame(past_times2016 %>% group_by(Name, Label, .drop = FALSE) %>% count("Date") %>% filter(Label == "Gold"))
as.data.frame(past_times2016 %>% group_by(Name, Label, .drop = FALSE) %>% count("Date", .drop = FALSE) %>% filter(Label == "Gold"))
as.data.frame(past_times2016 %>% group_by(Name, Label, .drop = FALSE) %>% count("Date", .drop = FALSE) %>% filter(Label == "Gold"))$n
past_times2016 %>% group_by(Name, Label, .drop = FALSE) %>% count("Date", .drop = FALSE)
as.data.frame(past_times2016 %>% group_by(Name, Label, .drop = FALSE) %>% count("Date", .drop = FALSE) %>% filter(Label == "Gold"))[, c(1,4)]
?seq
gold_list <- vector(mode="integer", length=length(names))
temp <- as.data.frame(past_times2016 %>% group_by(Name, Label, .drop = FALSE) %>% count("Date", .drop = FALSE) %>% filter(Label == "Gold"))[, c(1,4)]
for(i in 1:length(names)){
if(names[i] %in% temp$Name){
gold_list[i] <- temp$n[i]
}
else{
gold_list[i] <- 0
}
}
names <- feature_table$name
for(i in 1:length(names)){
if(names[i] %in% temp$Name){
gold_list[i] <- temp$n[i]
}
else{
gold_list[i] <- 0
}
}
temp <- as.data.frame(past_times2016 %>% group_by(Name, Label, .drop = FALSE) %>% count("Date", .drop = FALSE) %>% filter(Label == "Silver"))[, c(1,4)]
silver_list <- vector(mode="integer", length=length(names))
for(i in 1:length(names)){
if(names[i] %in% temp$Name){
silver_list[i] <- temp$n[i]
}
else{
silver_list[i] <- 0
}
}
feature_table$num_silver_marathons <- silver_list
temp <- as.data.frame(past_times2016 %>% group_by(Name, Label, .drop = FALSE) %>% count("Date", .drop = FALSE) %>% filter(Label == "Bronze"))[, c(1,4)]
bronze_list <- vector(mode="integer", length=length(names))
for(i in 1:length(names)){
if(names[i] %in% temp$Name){
bronze_list[i] <- temp$n[i]
}
else{
bronze_list[i] <- 0
}
}
feature_table$num_bronze_marathons <- bronze_list
View(feature_table)
feature_table$num_gold_marathons <- gold_list
save(marathonM_times, file = "Data\\Rda\\feature_table.RData")
rm("bronze_list", "dates", "gold_list", "i", "lct", "names", "silver_list", "convert_to_secs")
View(marathonM_times)
save(marathonM_times, file = "Data\\Rda\\marathonM_times1.RData")
# save the data
save(feature_table, file = "Data\\Rda\\feature_table.RData")
save(past_times, file = "Data\\past_times.Rdata")
save(past_times2016, file = "Data\\past_times2016.Rdata")
rm("bronze_list", "dates", "gold_list", "i", "lct", "names", "silver_list", "convert_to_secs", "temp")
View(marathonM_times)
getwd()
save(past_times, file = "Data\\Rda\\past_times.Rdata")
save(past_times2016, file = "Data\\Rda\\past_times2016.Rdata")
